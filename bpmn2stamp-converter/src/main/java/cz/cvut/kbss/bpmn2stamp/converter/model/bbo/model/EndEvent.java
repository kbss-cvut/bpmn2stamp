
package cz.cvut.kbss.bpmn2stamp.converter.model.bbo.model;

import cz.cvut.kbss.bpmn2stamp.converter.model.bbo.Vocabulary;
import cz.cvut.kbss.jopa.model.annotations.CascadeType;
import cz.cvut.kbss.jopa.model.annotations.OWLClass;
import cz.cvut.kbss.jopa.model.annotations.OWLObjectProperty;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraints;

import java.io.Serializable;
import java.util.Set;


/**
 * As the name implies, the End Event indicates where a Process will end. In terms of Sequence Flows, the End Event ends the flow of the Process, and thus, will not have any outgoing Sequence Flowsâ€”no Sequence Flow can connect from an End Event.
 * 
 * This class was generated by OWL2Java 0.16.4
 * 
 */
@OWLClass(iri = Vocabulary.s_c_EndEvent)
public class EndEvent
    extends ThrowEvent
    implements Serializable
{

    /**
     * identifies the incoming Sequence Flow of the FlowNode.
     * 
     */
    @OWLObjectProperty(cascade = CascadeType.PERSIST, iri = Vocabulary.s_p_has_incoming)
    @ParticipationConstraints({
//        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_SequenceFlow, min = 1, max = -1)
    })
    protected Set<Thing> has_incoming;
    /**
     * identifies the outgoing Sequence Flow of the FlowNode.
     * 
     */
    @OWLObjectProperty(cascade = CascadeType.PERSIST, iri = Vocabulary.s_p_has_outgoing)
    protected Set<SequenceFlow> has_outgoing;

    public void setHas_incoming(Set<Thing> has_incoming) {
        this.has_incoming = has_incoming;
    }

    public Set<Thing> getHas_incoming() {
        return has_incoming;
    }

    public void setHas_outgoing(Set<SequenceFlow> has_outgoing) {
        this.has_outgoing = has_outgoing;
    }

    public Set<SequenceFlow> getHas_outgoing() {
        return has_outgoing;
    }

}
