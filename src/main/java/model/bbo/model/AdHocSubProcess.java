
package model.bbo.model;

import java.io.Serializable;
import java.util.Set;
import cz.cvut.kbss.jopa.model.annotations.OWLClass;
import cz.cvut.kbss.jopa.model.annotations.OWLObjectProperty;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraint;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraints;
import model.bbo.Vocabulary;


/**
 * An Ad-Hoc Sub-Process is a specialized type of Sub-Process that is a group of Activities that have no REQUIRED sequence relationships. A set of Activities can be defined for the Process, but the sequence and number of performances for the Activities is determined by the performers of the Activities.
 * 
 * This class was generated by OWL2Java 0.16.4
 * 
 */
@OWLClass(iri = Vocabulary.s_c_AdHocSubProcess)
public class AdHocSubProcess
    extends SubProcess
    implements Serializable
{

    /**
     * This attribute defines a boolean Expression that when evaluated to true, cancels the remaining Activity instances and produces a token.
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_has_completionCondition)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Expression, min = 1, max = 1)
    })
    protected Expression has_completionCondition;
    /**
     * This association specifies the particular flow elements contained in a
     * FlowElementContainer. Flow elements are Events, Gateways, Sequence
     * Flows, Activities, Data Objects, Data Associations, and Choreography
     * Activities.
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_has_flowElements)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Activity, min = 1, max = -1)
    })
    protected Set<Thing> has_flowElements;

    public void setHas_completionCondition(Expression has_completionCondition) {
        this.has_completionCondition = has_completionCondition;
    }

    public Expression getHas_completionCondition() {
        return has_completionCondition;
    }

    public void setHas_flowElements(Set<Thing> has_flowElements) {
        this.has_flowElements = has_flowElements;
    }

    public Set<Thing> getHas_flowElements() {
        return has_flowElements;
    }

}
