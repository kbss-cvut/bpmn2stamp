
package model.bbo.model;

import java.io.Serializable;
import java.util.Set;
import cz.cvut.kbss.jopa.model.annotations.OWLClass;
import cz.cvut.kbss.jopa.model.annotations.OWLObjectProperty;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraint;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraints;
import model.bbo.Vocabulary;


/**
 * The Event-Based Gateway represents a branching point in the Process where the alternative paths that follow the Gateway are based on Events that occur, rather than the evaluation of Expressions using Process data (as with an Exclusive or Inclusive Gateway). A specific Event, usually the receipt of a Message, determines the path that will be taken. Basically, the decision is made by another Participant, based on data that is not visible to Process, thus, requiring the use of the Event-Based Gateway.
 * 
 * This class was generated by OWL2Java 0.16.4
 * 
 */
@OWLClass(iri = Vocabulary.s_c_EventBasedGateway)
public class EventBasedGateway
    extends Gateway
    implements Serializable
{

    /**
     * identifies the outgoing Sequence Flow of the FlowNode.
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_has_outgoing)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_SequenceFlow, min = 2, max = -1)
    })
    protected Set<SequenceFlow> has_outgoing;

    public void setHas_outgoing(Set<SequenceFlow> has_outgoing) {
        this.has_outgoing = has_outgoing;
    }

    public Set<SequenceFlow> getHas_outgoing() {
        return has_outgoing;
    }

}
