
package model.bbo;



/**
 * This class was generated by OWL2Java 0.16.4
 * 
 */
public class Vocabulary {

    public final static String ONTOLOGY_IRI_BPMNbasedOntology = "http://BPMNbasedOntology";
    public final static String ONTOLOGY_IRI_BPMNbasedOntology_generated = "http://BPMNbasedOntology-generated";
    public final static String s_c_Thing = "http://www.w3.org/2002/07/owl#Thing";
    /**
     * Work that a company or organization performs using business processes. An activity can be atomic or non-atomic (compound). The types of activities that are a part of a Process Model are: Process, Sub-Process, and Task.
     * 
     */
    public final static String s_c_Activity = "http://BPMNbasedOntology#Activity";
    /**
     * An Ad-Hoc Sub-Process is a specialized type of Sub-Process that is a group of Activities that have no REQUIRED sequence relationships. A set of Activities can be defined for the Process, but the sequence and number of performances for the Activities is determined by the performers of the Activities.
     * 
     */
    public final static String s_c_AdHocSubProcess = "http://BPMNbasedOntology#AdHocSubProcess";
    /**
     * Person or a Software that performs an activity
     * 
     */
    public final static String s_c_Agent = "http://BPMNbasedOntology#Agent";
    /**
     * All: no Event is ever thrown, a token is produced after completion of all instances.
     * Any thrown Events can be caught by boundary Events on the Multi-Instance Activity.
     * 
     */
    public final static String s_c_AllMultiInstanceLoopCharacteristics = "http://BPMNbasedOntology#AllMultiInstanceLoopCharacteristics";
    public final static String s_c_BoundaryEvent = "http://BPMNbasedOntology#BoundaryEvent";
    /**
     * A Business Rule Task provides a mechanism for the Process to provide input to a Business Rules Engine and to get the output of calculations that the Business Rules Engine might provide. The InputOutputSpecification of the Task (see page 211) will allow the Process to send data to and receive data from the Business Rules Engine.
     * 
     */
    public final static String s_c_BusinessRuleTask = "http://BPMNbasedOntology#BusinessRuleTask";
    /**
     * A Call Activity identifies a point in the Process where a global Process or a Global Task is used. The Call Activity acts as a ‘wrapper’ for the invocation of a global Process or Global Task within the execution. The activation of a call Activity results in the transfer of control to the called global Process or Global Task.
     * 
     */
    public final static String s_c_CallActivity = "http://BPMNbasedOntology#CallActivity";
    /**
     * CallableElement is the abstract super class of all Activities that have been defined outside of a Process or Choreography but which can be called (or reused), by a Call Activity, from within a Process or Choreography. It MAY reference Interfaces that define the service operations that it provides. The BPMN elements that can be called by Call Activities (i.e., are CallableElements) are: Process and GlobalTask (see Figure 10.43).
     * 
     */
    public final static String s_c_CallableElement = "http://BPMNbasedOntology#CallableElement";
    public final static String s_c_CancelEvent = "http://BPMNbasedOntology#CancelEvent";
    /**
     * Cancel Events are only used in the context of modeling Transaction Sub-Processes (see page 178 for more details on Transactions). There are two variations: a catch Intermediate Event and an End Event.
     * 
     */
    public final static String s_c_CancelEventDefinition = "http://BPMNbasedOntology#CancelEventDefinition";
    /**
     * Events that catch a trigger. All Start Events and some Intermediate Events are catching Events.
     * 
     */
    public final static String s_c_CatchEvent = "http://BPMNbasedOntology#CatchEvent";
    /**
     * /
     * 
     */
    public final static String s_c_Cell = "http://BPMNbasedOntology#Cell";
    /**
     * Compensation Events are used in the context of triggering or handling compensation (see page 302 for more details on compensation). There are four variations: a Start Event, both a catch and throw Intermediate Event, and an End Event.
     * 
     */
    public final static String s_c_CompensateEventDefinition = "http://BPMNbasedOntology#CompensateEventDefinition";
    public final static String s_c_CompensationEvent = "http://BPMNbasedOntology#CompensationEvent";
    /**
     * This element controls when and which Events are thrown in case behavior of the Multi-Instance Activity is set to complex.
     * 
     */
    public final static String s_c_ComplexBehaviorDefinition = "http://BPMNbasedOntology#ComplexBehaviorDefinition";
    /**
     * The Complex Gateway can be used to model complex synchronization behavior. An Expression activationCondition is used to describe the precise behavior. For example, this Expression could specify that tokens on three out of five incoming Sequence Flows are needed to activate the Gateway. What tokens are produced by the Gateway is determined by conditions on the outgoing Sequence Flows as in the split behavior of the Inclusive Gateway. If tokens arrive later on the two remaining Sequence Flows, those tokens cause a reset of the Gateway and new token can be produced on the outgoing Sequence Flows. To determine whether it needs to wait for additional tokens before it can reset, the Gateway uses the synchronization semantics of the Inclusive Gateway.
     * 
     */
    public final static String s_c_ComplexGateway = "http://BPMNbasedOntology#ComplexGateway";
    /**
     * Complex: the complexBehaviorDefinitions are consulted to determine if and which Events to throw.
     * Any thrown Events can be caught by boundary Events on the Multi-Instance Activity.
     * 
     */
    public final static String s_c_ComplexMultiInstanceLoopCharacteristics = "http://BPMNbasedOntology#ComplexMultiInstanceLoopCharacteristics";
    /**
     * /
     * 
     */
    public final static String s_c_Component = "http://BPMNbasedOntology#Component";
    public final static String s_c_Computer = "http://BPMNbasedOntology#Computer";
    /**
     * /
     * 
     */
    public final static String s_c_ConditionExpression = "http://BPMNbasedOntology#ConditionExpression";
    public final static String s_c_ConditionalEvent = "http://BPMNbasedOntology#ConditionalEvent";
    /**
     * /
     * 
     */
    public final static String s_c_ConditionalEventDefinition = "http://BPMNbasedOntology#ConditionalEventDefinition";
    public final static String s_c_ConditionalSequenceFlow = "http://BPMNbasedOntology#ConditionalSequenceFlow";
    /**
     * /
     * 
     */
    public final static String s_c_ConsumableResource = "http://BPMNbasedOntology#ConsumableResource";
    public final static String s_c_ConvergingGateway = "http://BPMNbasedOntology#ConvergingGateway";
    /**
     * /
     * 
     */
    public final static String s_c_DataResource = "http://BPMNbasedOntology#DataResource";
    /**
     * /
     * 
     */
    public final static String s_c_Database = "http://BPMNbasedOntology#Database";
    public final static String s_c_DefaultSequenceFlow = "http://BPMNbasedOntology#DefaultSequenceFlow";
    /**
     * /
     * 
     */
    public final static String s_c_Device = "http://BPMNbasedOntology#Device";
    public final static String s_c_DivergingGateway = "http://BPMNbasedOntology#DivergingGateway";
    /**
     * /
     * 
     */
    public final static String s_c_DocumentResource = "http://BPMNbasedOntology#DocumentResource";
    /**
     * As the name implies, the End Event indicates where a Process will end. In terms of Sequence Flows, the End Event ends the flow of the Process, and thus, will not have any outgoing Sequence Flows—no Sequence Flow can connect from an End Event.
     * 
     */
    public final static String s_c_EndEvent = "http://BPMNbasedOntology#EndEvent";
    /**
     * /
     * 
     */
    public final static String s_c_Enterprise = "http://BPMNbasedOntology#Enterprise";
    /**
     * Type of technical documentation containing the design information of a material resource.
     * 
     */
    public final static String s_c_EquipmentDraw = "http://BPMNbasedOntology#EquipmentDraw";
    /**
     * An Error represents the content of an Error Event or the Fault of a failed Operation. An ItemDefinition is used to specify the structure of the Error. An Error is generated when there is a critical problem in the processing of an Activity or when the execution of an Operation failed.
     * 
     */
    public final static String s_c_Error = "http://BPMNbasedOntology#Error";
    public final static String s_c_ErrorEvent = "http://BPMNbasedOntology#ErrorEvent";
    /**
     * /
     * 
     */
    public final static String s_c_ErrorEventDefinition = "http://BPMNbasedOntology#ErrorEventDefinition";
    /**
     * An Escalation identifies a business situation that a Process might need to react to. An ItemDefinition is used to specify the structure of the Escalation.
     * 
     */
    public final static String s_c_Escalation = "http://BPMNbasedOntology#Escalation";
    public final static String s_c_EscalationEvent = "http://BPMNbasedOntology#EscalationEvent";
    /**
     * /
     * 
     */
    public final static String s_c_EscalationEventDefinition = "http://BPMNbasedOntology#EscalationEventDefinition";
    /**
     * An Event is something that “happens” during the course of a Process. These Events affect the flow of the Process and usually have a cause or an impact and in general require or allow for a reaction. The term “event” is general enough to cover many things in a Process. The start of an Activity, the end of an Activity, the change of state of a document, a Message that arrives, etc., all could be considered Events.
     * 
     */
    public final static String s_c_Event = "http://BPMNbasedOntology#Event";
    /**
     * The Event-Based Gateway represents a branching point in the Process where the alternative paths that follow the Gateway are based on Events that occur, rather than the evaluation of Expressions using Process data (as with an Exclusive or Inclusive Gateway). A specific Event, usually the receipt of a Message, determines the path that will be taken. Basically, the decision is made by another Participant, based on data that is not visible to Process, thus, requiring the use of the Event-Based Gateway.
     * 
     */
    public final static String s_c_EventBasedGateway = "http://BPMNbasedOntology#EventBasedGateway";
    /**
     * Event Definitions refers to the triggers of Catch Events (Start and receive Intermediate Events) and the Results of Throw Events (End Events and send Intermediate Events). The types of Event Definitions are: CancelEventDefinition, CompensationEventDefinition, ConditionalEventDefinition ErrorEventDefinition, EscalationEventDefinition, MessageEventDefinitio, LinkEventDefinition, SignalEventDefinition, TerminateEventDefinition, an TimerEventDefinition (see Table 10.93). A None Event is determined by an Event that does not specify an
     *  Event Definition. A Multiple Event is determined by an Event that specifies more than one Event Definition. The different types of Events (Start, End, and Intermediate) utilize a subset of the available types of Event Definitions.
     * 
     */
    public final static String s_c_EventDefinition = "http://BPMNbasedOntology#EventDefinition";
    /**
     * EventBasedSubProcess
     * 
     */
    public final static String s_c_EventSubProcess = "http://BPMNbasedOntology#EventSubProcess";
    /**
     * The StartEvent of an EventBasedSubProcess
     * 
     */
    public final static String s_c_EventSubProcessStartEvent = "http://BPMNbasedOntology#EventSubProcessStartEvent";
    public final static String s_c_ExclusiveEventBasedGateway = "http://BPMNbasedOntology#ExclusiveEventBasedGateway";
    /**
     * A diverging Exclusive Gateway (Decision) is used to create alternative paths within a Process flow. This is basically the “diversion point in the road” for a Process. For a given instance of the Process, only one of the paths can be taken.
     * 
     */
    public final static String s_c_ExclusiveGateway = "http://BPMNbasedOntology#ExclusiveGateway";
    public final static String s_c_ExecutablePrivateProcess = "http://BPMNbasedOntology#ExecutablePrivateProcess";
    /**
     * /
     * 
     */
    public final static String s_c_ExecutableScript = "http://BPMNbasedOntology#ExecutableScript";
    /**
     * The Expression class is used to specify an Expression using natural-language text. These Expressions are not executable. The natural language text is captured using the documentation attribute, inherited from BaseElement.
     * 
     */
    public final static String s_c_Expression = "http://BPMNbasedOntology#Expression";
    /**
     * /
     * 
     */
    public final static String s_c_Factory = "http://BPMNbasedOntology#Factory";
    /**
     * FlowElement is the abstract super class for all elements that can appear in a Process flow, which are FlowNodes (see page 99, which consist of Activities (see page 151), Choreography Activities (see page 321) Gateways (see page 287), and Events (see page 233), Data Objects (see page 205), Data Associations (see page 221), and Sequence Flows (see page 97).
     * 
     */
    public final static String s_c_FlowElement = "http://BPMNbasedOntology#FlowElement";
    /**
     * /
     * 
     */
    public final static String s_c_FlowElementsContainer = "http://BPMNbasedOntology#FlowElementsContainer";
    /**
     * The FlowNode element is used to provide a single element as the source and target Sequence Flow associations (see Figure 8.35) instead of the individual associations of the elements that can connect to Sequence Flows (see the section above). Only the Gateway, Activity, Choreography Activity, and Event elements can connect to Sequence Flows and thus, these elements are the only ones that are sub-classes of FlowNode.
     * 
     */
    public final static String s_c_FlowNode = "http://BPMNbasedOntology#FlowNode";
    /**
     * The FormalExpression class is used to specify an executable Expression using a specified Expression language. A natural-language description of the Expression can also be specified, in addition to the formal specification.
     * 
     */
    public final static String s_c_FormalExpression = "http://BPMNbasedOntology#FormalExpression";
    /**
     * Gateways are used to control how Sequence Flows interact as they converge and diverge within a Process. If the flow does not need to be controlled, then a Gateway is not needed. The term “Gateway” implies that there is a gating mechanism that either allows or disallows passage through the Gateway--that is, as tokens arrive at a Gateway, they can be merged together on input and/or split apart on output as the Gateway mechanisms are invoked.
     * 
     */
    public final static String s_c_Gateway = "http://BPMNbasedOntology#Gateway";
    /**
     * /
     * 
     */
    public final static String s_c_GlobalBusinessRuleTask = "http://BPMNbasedOntology#GlobalBusinessRuleTask";
    /**
     * /
     * 
     */
    public final static String s_c_GlobalManualTask = "http://BPMNbasedOntology#GlobalManualTask";
    /**
     * /
     * 
     */
    public final static String s_c_GlobalScriptTask = "http://BPMNbasedOntology#GlobalScriptTask";
    /**
     * A Global Task is a reusable, atomic Task definition that can be called from within any Process by a Call Activity.
     * 
     */
    public final static String s_c_GlobalTask = "http://BPMNbasedOntology#GlobalTask";
    /**
     * /
     * 
     */
    public final static String s_c_GlobalUserTask = "http://BPMNbasedOntology#GlobalUserTask";
    /**
     * The Group class represents a collection of individual agents (and may itself play the role of a Agent, ie. something that can perform actions). [Definition extracted from FOAF Vocabulary Specification 0.99]
     * 
     */
    public final static String s_c_Group = "http://BPMNbasedOntology#Group";
    /**
     * Human agents contributing to the execution of business processes.
     * 
     */
    public final static String s_c_HumanResource = "http://BPMNbasedOntology#HumanResource";
    /**
     * A sub-type of throw Event is the ImplicitThrowEvent. This is a non-graphical Event that is used for Multi-Instance Activities (see page 191).
     * 
     */
    public final static String s_c_ImplicitThrowEvent = "http://BPMNbasedOntology#ImplicitThrowEvent";
    /**
     * A diverging Inclusive Gateway (Inclusive Decision) can be used to create alternative but also parallel paths within a Process flow. Unlike the Exclusive Gateway, all condition Expressions are evaluated. The true evaluation of one condition Expression does not exclude the evaluation of other condition Expressions. All Sequence Flows with a true evaluation will be traversed by a token. Since each path is considered to be independent, all combinations of the paths MAY be taken, from zero to all. However, it should be designed so that at least one path is taken.
     * 
     */
    public final static String s_c_InclusiveGateway = "http://BPMNbasedOntology#InclusiveGateway";
    /**
     * When a CallableElement is exposed as a Service, it has to define one or more InputOutputBinding elements. An InputOutputBinding element binds one Input and one Output of the InputOutputSpecification to an Operation of a Service Interface.
     * 
     */
    public final static String s_c_InputOutputBinding = "http://BPMNbasedOntology#InputOutputBinding";
    /**
     * /
     * 
     */
    public final static String s_c_InputOutputSpecification = "http://BPMNbasedOntology#InputOutputSpecification";
    /**
     * An InputSet is a collection of Resource elements that together define a valid set of Resources  for an InputOutputSpecification. An InputOutputSpecification MUST have at least one InputSet element. An InputSet MAY reference zero or more Resource elements. A single Resource MAY be associated with multiple InputSet elements, but it MUST always be referenced by at least one InputSet.
     * 
     */
    public final static String s_c_InputSet = "http://BPMNbasedOntology#InputSet";
    /**
     * An interface defines a set of operations that are implemented by Services.
     * 
     */
    public final static String s_c_Interface = "http://BPMNbasedOntology#Interface";
    /**
     * A Message Intermediate Event can be used to either send a Message or receive a Message. When used to “catch” the Message,
     * then the Event marker MUST be unfilled (see the lower figure on the right).
     * 
     */
    public final static String s_c_IntermediateCatchEvent = "http://BPMNbasedOntology#IntermediateCatchEvent";
    /**
     * The Intermediate Event indicates where something happens (an Event) somewhere between the start and end of a Process. It will affect the flow of the Process, but will not start or (directly) terminate the process.
     * 
     */
    public final static String s_c_IntermediateEvent = "http://BPMNbasedOntology#IntermediateEvent";
    /**
     * A Message Intermediate Event can be used to either send a Message or receive a Message.
     * 
     */
    public final static String s_c_IntermediateThrowEvent = "http://BPMNbasedOntology#IntermediateThrowEvent";
    /**
     * the Activity attached to this event should be cancelled
     * 
     */
    public final static String s_c_InterruptingBoundaryEvent = "http://BPMNbasedOntology#InterruptingBoundaryEvent";
    public final static String s_c_InterruptingEventSubProcessStartEvent = "http://BPMNbasedOntology#InterruptingEventSubProcessStartEvent";
    public final static String s_c_Job = "http://BPMNbasedOntology#Job";
    public final static String s_c_LinkEvent = "http://BPMNbasedOntology#LinkEvent";
    /**
     * A Link Event is a mechanism for connecting two sections of a Process. Link Events can be used to create looping situations or to avoid long Sequence Flow lines. The use of Link Events is limited to a single Process level (i.e., they cannot link a parent Process with a Sub-Process).
     * 
     */
    public final static String s_c_LinkEventDefinition = "http://BPMNbasedOntology#LinkEventDefinition";
    /**
     * Activities MAY be repeated sequentially, essentially behaving like a loop. The presence of LoopCharacteristics signifies that the Activity has looping behavior. LoopCharacteristics is an abstract class. Concrete subclasses define specific kinds of looping behavior.
     * 
     */
    public final static String s_c_LoopCharacteristics = "http://BPMNbasedOntology#LoopCharacteristics";
    /**
     * A Manual Task is a Task that is expected to be performed without the aid of any business process execution engine or any application. An example of this could be a telephone technician installing a telephone at a customer location.
     * 
     */
    public final static String s_c_ManualTask = "http://BPMNbasedOntology#ManualTask";
    /**
     * /
     * 
     */
    public final static String s_c_ManufacturingFacility = "http://BPMNbasedOntology#ManufacturingFacility";
    /**
     * a physical resource
     * 
     */
    public final static String s_c_MaterialResource = "http://BPMNbasedOntology#MaterialResource";
    /**
     * A Message represents the content of a communication between two Participants. In BPMN 2.0, a Message is a graphical decorator (it was a supporting element in BPMN 1.2). An ItemDefinition is used to specify the Message structure.
     * 
     */
    public final static String s_c_Message = "http://BPMNbasedOntology#Message";
    /**
     * /
     * 
     */
    public final static String s_c_MessageEventDefinition = "http://BPMNbasedOntology#MessageEventDefinition";
    public final static String s_c_MixedGateway = "http://BPMNbasedOntology#MixedGateway";
    /**
     * The MultiInstanceLoopCharacteristics class allows for creation of a desired number of Activity instances. The instances MAY execute in parallel or MAY be sequential. Either an Expression is used to specify or calculate the desired number of instances or a data driven setup can be used. In that case a data input can be specified, which is able to handle a collection of data. The number of items in the collection determines the number of Activity instances. This data input can be produced by an input Data Association. The modeler can also configure this loop to control the tokens produced.
     * 
     */
    public final static String s_c_MultiInstanceLoopCharacteristics = "http://BPMNbasedOntology#MultiInstanceLoopCharacteristics";
    public final static String s_c_MultipleEvent = "http://BPMNbasedOntology#MultipleEvent";
    public final static String s_c_NonEventSubProcessStartEvent = "http://BPMNbasedOntology#NonEventSubProcessStartEvent";
    public final static String s_c_NonExecutableBusinessProcess = "http://BPMNbasedOntology#NonExecutableBusinessProcess";
    /**
     * the Activity attached to this event should not be cancelled
     * 
     */
    public final static String s_c_NonInterruptingBoundaryEvent = "http://BPMNbasedOntology#NonInterruptingBoundaryEvent";
    public final static String s_c_NonInterruptingEventSubProcessStartEvent = "http://BPMNbasedOntology#NonInterruptingEventSubProcessStartEvent";
    public final static String s_c_NoneEvent = "http://BPMNbasedOntology#NoneEvent";
    /**
     * None: the EventDefinition which is associated through the noneEvent association will be thrown for each instance completing.
     * Any thrown Events can be caught by boundary Events on the Multi-Instance Activity.
     * 
     */
    public final static String s_c_NoneMultiInstanceLoopCharacteristics = "http://BPMNbasedOntology#NoneMultiInstanceLoopCharacteristics";
    public final static String s_c_NormalSequenceFlow = "http://BPMNbasedOntology#NormalSequenceFlow";
    /**
     * One: the EventDefinition referenced through the oneEvent association will be thrown upon the first instance completing.
     * Any thrown Events can be caught by boundary Events on the Multi-Instance Activity.
     * 
     */
    public final static String s_c_OneMultiInstanceLoopCharacteristics = "http://BPMNbasedOntology#OneMultiInstanceLoopCharacteristics";
    /**
     * An Operation defines Messages that are consumed and, optionally, produced when the Operation is called. It can also define zero or more errors that are returned when operation fails. The Operation inherits the attributes and model associations of BaseElement
     * 
     */
    public final static String s_c_Operation = "http://BPMNbasedOntology#Operation";
    /**
     * An OutputSet is a collection of Resource elements that together can be produced as output from an Activity or Event. An InputOutputSpecification element MUST define at least OutputSet element. An OutputSet MAY reference zero or more Resource elements. A single Resource output MAY be associated with multiple OutputSet elements, but it MUST always be referenced by at least one OutputSet.
     * 
     */
    public final static String s_c_OutputSet = "http://BPMNbasedOntology#OutputSet";
    /**
     * all the Activities of the Sub-Process can be performed in parallel
     * 
     */
    public final static String s_c_ParallelAdHocSubProcess = "http://BPMNbasedOntology#ParallelAdHocSubProcess";
    public final static String s_c_ParallelEventBasedGateway = "http://BPMNbasedOntology#ParallelEventBasedGateway";
    /**
     * A Parallel Gateway is used to synchronize (combine) parallel flows and to create parallel flows.
     * 
     */
    public final static String s_c_ParallelGateway = "http://BPMNbasedOntology#ParallelGateway";
    /**
     * all of the types of EventDefinition that are listed in the Event MUST be triggered.
     * 
     */
    public final static String s_c_ParallelMultipleEvent = "http://BPMNbasedOntology#ParallelMultipleEvent";
    /**
     * A specific characteristic of an object that may have different values
     * 
     */
    public final static String s_c_Parameter = "http://BPMNbasedOntology#Parameter";
    public final static String s_c_ParameterExpectedValue = "http://BPMNbasedOntology#ParameterExpectedValue";
    public final static String s_c_ParameterValue = "http://BPMNbasedOntology#ParameterValue";
    /**
     * An abstract class that binds a parameter to its value, and eventually its expected value.
     * 
     */
    public final static String s_c_ParameterValueBinding = "http://BPMNbasedOntology#ParameterValueBinding";
    /**
     * Human individual
     * 
     */
    public final static String s_c_Person = "http://BPMNbasedOntology#Person";
    /**
     * A process that is internal to a specific organization and is the type of process that has been generally called a workflow or BPM process.
     * 
     */
    public final static String s_c_PrivateProcess = "http://BPMNbasedOntology#PrivateProcess";
    /**
     * A sequence or flow of Activities in an organization with the objective of carrying out work. In BPMN, a Process is depicted as a graph of Flow Elements, which are a set of Activities, Events, Gateways, and Sequence Flow that adhere to a finite execution semantics.
     * 
     */
    public final static String s_c_Process = "http://BPMNbasedOntology#Process";
    public final static String s_c_ProcessStartEvent = "http://BPMNbasedOntology#ProcessStartEvent";
    /**
     * Modeler-defined properties MAY be added to a Process. These properties are contained within the Process. All Tasks and Sub-Processes SHALL have access to these properties.
     * 
     */
    public final static String s_c_Property = "http://BPMNbasedOntology#Property";
    public final static String s_c_PublicProcess = "http://BPMNbasedOntology#PublicProcess";
    /**
     * parameters that have only qualitative values
     * 
     */
    public final static String s_c_QualitativeParameter = "http://BPMNbasedOntology#QualitativeParameter";
    /**
     * parameters that have only quantitative values
     * 
     */
    public final static String s_c_QuantitativeParameter = "http://BPMNbasedOntology#QuantitativeParameter";
    /**
     * A Receive Task is a simple Task that is designed to wait for a Message to arrive from an external Participant (relative to the Process). Once the Message has been received, the Task is completed.
     * 
     */
    public final static String s_c_ReceiveTask = "http://BPMNbasedOntology#ReceiveTask";
    public final static String s_c_Rendering = "http://BPMNbasedOntology#Rendering";
    /**
     * The Resource class is used to specify resources that can be referenced by Activities. These Resources can be Human Resources as well as any other resource assigned to Activities during Process execution time. The definition of a Resource is “abstract,” because it only defines the Resource, without detailing how e.g., actual user IDs are associated at runtime. Multiple Activities can utilize the same Resource.
     * 
     */
    public final static String s_c_Resource = "http://BPMNbasedOntology#Resource";
    /**
     * An abstract class that groups a set of resources
     * 
     */
    public final static String s_c_ResourceCollection = "http://BPMNbasedOntology#ResourceCollection";
    /**
     * A parameter related to a specific resource, only one resource
     * 
     */
    public final static String s_c_ResourceParameter = "http://BPMNbasedOntology#ResourceParameter";
    public final static String s_c_ResourceState = "http://BPMNbasedOntology#ResourceState";
    public final static String s_c_Role = "http://BPMNbasedOntology#Role";
    /**
     * RootElement is the abstract super class for all BPMN elements that are contained within Definitions. When contained within Definitions, these elements have their own defined life-cycle and are not deleted with the deletion of other elements. Examples of concrete RootElements include Collaboration, Process, and Choreography. Depending on their use, RootElements can be referenced by multiple other elements (i.e., they can be reused). Some RootElements MAY be contained within other elements instead of Definitions. This is done to avoid the maintenance overhead of an independent life-cycle. For example, an EventDefinition would be contained in a Process since it is used only there. In this case the EventDefinition would be dependent on the tool life-cycle of
     * the Process.
     * 
     */
    public final static String s_c_RootElement = "http://BPMNbasedOntology#RootElement";
    /**
     * /
     * 
     */
    public final static String s_c_Scheme = "http://BPMNbasedOntology#Scheme";
    /**
     * A Script Task is executed by a business process engine. The modeler or implementer defines a script in a language that the engine can interpret. When the Task is ready to start, the engine will execute the script. When the script is completed, the Task will also be completed.
     * 
     */
    public final static String s_c_ScriptTask = "http://BPMNbasedOntology#ScriptTask";
    /**
     * A Send Task is a simple Task that is designed to send a Message to an external Participant (relative to the Process). Once the Message has been sent, the Task is completed.
     * 
     */
    public final static String s_c_SendTask = "http://BPMNbasedOntology#SendTask";
    /**
     * A connecting object that shows the order in which activities are performed in a Process and is represented with a solid graphical line. Each Flow has only one source and only one target. A Sequence Flow can cross the boundaries between Lanes of a Pool but cannot cross the boundaries of a Pool.
     * 
     */
    public final static String s_c_SequenceFlow = "http://BPMNbasedOntology#SequenceFlow";
    /**
     * only one Activity can be performed at a time
     * 
     */
    public final static String s_c_SequentialAdHocSubProcess = "http://BPMNbasedOntology#SequentialAdHocSubProcess";
    /**
     * A Service Task is a Task that uses some sort of service, which could be a Web service or an automated application.
     * 
     */
    public final static String s_c_ServiceTask = "http://BPMNbasedOntology#ServiceTask";
    /**
     * /
     * 
     */
    public final static String s_c_Shop = "http://BPMNbasedOntology#Shop";
    /**
     * A BPMN Signal is similar to a signal flare that shot into the sky for anyone who might be interested to notice and then react. Thus, there is a source of the Signal, but no specific intended target.
     * 
     */
    public final static String s_c_Signal = "http://BPMNbasedOntology#Signal";
    public final static String s_c_SignalEvent = "http://BPMNbasedOntology#SignalEvent";
    /**
     * /
     * 
     */
    public final static String s_c_SignalEventDefinition = "http://BPMNbasedOntology#SignalEventDefinition";
    /**
     * A software used by an agent to perform a process, or a software agent that executes specific tasks.
     * 
     */
    public final static String s_c_SoftwareResource = "http://BPMNbasedOntology#SoftwareResource";
    /**
     * /
     * 
     */
    public final static String s_c_SparePart = "http://BPMNbasedOntology#SparePart";
    /**
     * The StandardLoopCharacteristics class defines looping behavior based on a boolean condition. The Activity will loop as long as the boolean condition is true. The condition is evaluated for every loop iteration, and MAY be evaluated at the beginning or at the end of the iteration. In addition, a numeric cap can be optionally specified. The number of iterations MAY NOT exceed this cap.
     * 
     */
    public final static String s_c_StandardLoopCharacteristics = "http://BPMNbasedOntology#StandardLoopCharacteristics";
    /**
     * As the name implies, the Start Event indicates where a particular Process will start. In terms of Sequence Flows, the Start Event starts the flow of the Process, and thus, will not have any incoming Sequence Flows—no Sequence Flow can connect to a Start Event.
     * flow of the Process and does not have any incoming Sequence Flow, but can have a Trigger. The Start Event is displayed as a circle, drawn with a single thin line.
     * 
     */
    public final static String s_c_StartEvent = "http://BPMNbasedOntology#StartEvent";
    /**
     * /
     * 
     */
    public final static String s_c_Station = "http://BPMNbasedOntology#Station";
    /**
     * A Process that is included within another Process.
     * 
     */
    public final static String s_c_SubProcess = "http://BPMNbasedOntology#SubProcess";
    public final static String s_c_SubProcessStartEvent = "http://BPMNbasedOntology#SubProcessStartEvent";
    /**
     * An atomic activity that is included within a Process. A Task is used when the work in the Process is not broken down to a finer level of Process Model detail. Generally, an end-user, an application, or both will perform the Task. A Task object shares the same shape as the Sub-Process, which is a rectangle that has rounded corners.
     * 
     */
    public final static String s_c_Task = "http://BPMNbasedOntology#Task";
    /**
     * Specific type of document containing technical information about material or software resources such as the user manual.
     * 
     */
    public final static String s_c_TechnicalDocument = "http://BPMNbasedOntology#TechnicalDocument";
    /**
     * /
     * 
     */
    public final static String s_c_Telecommand = "http://BPMNbasedOntology#Telecommand";
    public final static String s_c_TerminateEvent = "http://BPMNbasedOntology#TerminateEvent";
    /**
     * /
     * 
     */
    public final static String s_c_TerminateEventDefinition = "http://BPMNbasedOntology#TerminateEventDefinition";
    /**
     * Events that throw a Result. All End Events and some Intermediate Events are throwing Events that MAY eventually be caught by another Event. Typically the trigger carries information out of the scope where the throw Event occurred into the scope of the catching Events. The throwing of a trigger MAY be either implicit as defined by this standard or an extension to it or explicit by a throw Event
     * 
     */
    public final static String s_c_ThrowEvent = "http://BPMNbasedOntology#ThrowEvent";
    /**
     * An expression that specifies a duration, a specific date, or a cycle
     * 
     */
    public final static String s_c_TimeExpression = "http://BPMNbasedOntology#TimeExpression";
    public final static String s_c_TimerEvent = "http://BPMNbasedOntology#TimerEvent";
    /**
     * /
     * 
     */
    public final static String s_c_TimerEventDefinition = "http://BPMNbasedOntology#TimerEventDefinition";
    /**
     * /
     * 
     */
    public final static String s_c_Tool = "http://BPMNbasedOntology#Tool";
    /**
     * A Sub-Process that represents a set of coordinated activities carried out by independent, loosely-coupled systems in accordance with a contractually defined business relationship. This coordination leads to an agreed, consistent, and verifiable outcome across all participants.
     * 
     */
    public final static String s_c_Transaction = "http://BPMNbasedOntology#Transaction";
    public final static String s_c_UnderspecifiedExpression = "http://BPMNbasedOntology#UnderspecifiedExpression";
    public final static String s_c_UnitOfMeasure = "http://BPMNbasedOntology#UnitOfMeasure";
    public final static String s_c_UnspecifiedGateway = "http://BPMNbasedOntology#UnspecifiedGateway";
    /**
     * A user guide intended to give assistance to people using a particular system. Most user guides contain both a written guide and associated images. In the case of computer applications, it is usual to include screenshots of the human-machine interface(s), and hardware manuals often include clear, simplified diagrams.
     * 
     */
    public final static String s_c_UserManual = "http://BPMNbasedOntology#UserManual";
    /**
     * A User Task is a typical “workflow” Task where a human performer performs the Task with the assistance of a software application and is scheduled through a task list manager of some sort.
     * 
     */
    public final static String s_c_UserTask = "http://BPMNbasedOntology#UserTask";
    /**
     * A document that describes a business process (or a work procedure)
     * 
     */
    public final static String s_c_WorkProcedureDocument = "http://BPMNbasedOntology#WorkProcedureDocument";
    public final static String s_c_WorkProduct = "http://BPMNbasedOntology#WorkProduct";
    public final static String s_c_UO_0000000 = "http://purl.obolibrary.org/obo/UO_0000000";
    public final static String s_c_UO_0000046 = "http://purl.obolibrary.org/obo/UO_0000046";
    public final static String s_p_belongs = "http://BPMNbasedOntology#belongs";
    /**
     * If an Activity A dependsOn an Activity B, A can not start before completing B.
     * 
     */
    public final static String s_p_dependsOn = "http://BPMNbasedOntology#dependsOn";
    public final static String s_p_describes = "http://BPMNbasedOntology#describes";
    public final static String s_p_groups = "http://BPMNbasedOntology#groups";
    /**
     * Determines which combination of incoming tokens will be synchronized for
     * activation of the Gateway.
     * 
     */
    public final static String s_p_has_activationCondition = "http://BPMNbasedOntology#has_activationCondition";
    /**
     * [IRIT]denotes the activity related to the source element
     * 
     */
    public final static String s_p_has_activity = "http://BPMNbasedOntology#has_activity";
    /**
     * For a Start Event:
     * This Event “catches” the compensation for an Event Sub-Process. No further
     * information is REQUIRED. The Event Sub-Process will provide the Id necessary
     * to match the Compensation Event with the Event that threw the compensation,
     * or the compensation will have been a broadcast.
     * For an End Event:
     * The Activity to be compensated MAY be supplied. If an Activity is not supplied,
     * then the compensation is broadcast to all completed Activities in the current Sub-
     * Process (if present), or the entire Process instance (if at the global level).
     * For an Intermediate Event within normal flow:
     * The Activity to be compensated MAY be supplied. If an Activity is not supplied,
     * then the compensation is broadcast to all completed Activities in the current Sub-
     * Process (if present), or the entire Process instance (if at the global level). This
     * “throws” the compensation.
     * For an Intermediate Event attached to the boundary of an Activity:
     * This Event “catches” the compensation. No further information is REQUIRED. The
     * Activity the Event is attached to will provide the Id necessary to match the
     * Compensation Event with the Event that threw the compensation, or the
     * compensation will have been a broadcast.
     * 
     */
    public final static String s_p_has_activityRef = "http://BPMNbasedOntology#has_activityRef";
    /**
     * This references the Intermediate Events that are attached to the
     * boundary of the Activity.
     * 
     */
    public final static String s_p_has_boundaryEventRef = "http://BPMNbasedOntology#has_boundaryEventRef";
    public final static String s_p_has_callActivity = "http://BPMNbasedOntology#has_callActivity";
    public final static String s_p_has_callableElement = "http://BPMNbasedOntology#has_callableElement";
    /**
     * The element to be called, which will be either a Process or a
     * GlobalTask.
     * 
     */
    public final static String s_p_has_calledElement = "http://BPMNbasedOntology#has_calledElement";
    /**
     * This attribute defines a boolean Expression that when evaluated to true, cancels the remaining Activity instances and produces a token.
     * 
     */
    public final static String s_p_has_completionCondition = "http://BPMNbasedOntology#has_completionCondition";
    public final static String s_p_has_complexBehaviorDefinition = "http://BPMNbasedOntology#has_complexBehaviorDefinition";
    /**
     * [IRIT] references the ComplexGateway which is concerned with the Expression
     * 
     */
    public final static String s_p_has_complexGateway = "http://BPMNbasedOntology#has_complexGateway";
    /**
     * This relation has two source concepts. The definition is related to the source concept: (1) conditionalEventDefinition: The Expression might be underspecified and provided in the form of natural language. For executable Processes (isExecutable = true), if the trigger is Conditional, then a FormalExpression MUST be entered. (2) complexBehaviorDefinition: This attribute defines a boolean Expression that when evaluated to true, cancels the remaining Activity instances and produces a token.
     * 
     */
    public final static String s_p_has_condition = "http://BPMNbasedOntology#has_condition";
    /**
     * An optional boolean Expression that acts as a gating condition. A token will only
     * be placed on this Sequence Flow if this conditionExpression evaluates to
     * true.
     * 
     */
    public final static String s_p_has_conditionExpression = "http://BPMNbasedOntology#has_conditionExpression";
    /**
     * [IRIT] this relation references the FlowElementContainer that includes the FlowElement
     * 
     */
    public final static String s_p_has_container = "http://BPMNbasedOntology#has_container";
    public final static String s_p_has_dataResourceInput = "http://BPMNbasedOntology#has_dataResourceInput";
    public final static String s_p_has_dataResourceOutput = "http://BPMNbasedOntology#has_dataResourceOutput";
    /**
     * The Sequence Flow that will receive a token when none of the conditionExpressions on other outgoing Sequence Flows evaluate to true. The default Sequence Flow should not have a conditionExpression. Any such Expression SHALL be ignored.
     * 
     */
    public final static String s_p_has_default = "http://BPMNbasedOntology#has_default";
    public final static String s_p_has_defaultElement = "http://BPMNbasedOntology#has_defaultElement";
    /**
     * for an Operation instance: specifies errors that the Operation may return. An Operation MAY refer to zero or more Error elements.
     * 
     */
    public final static String s_p_has_errorRef = "http://BPMNbasedOntology#has_errorRef";
    /**
     * If the trigger is an Escalation, then an Escalation payload MAY be provided.
     * 
     */
    public final static String s_p_has_escalationRef = "http://BPMNbasedOntology#has_escalationRef";
    public final static String s_p_has_event = "http://BPMNbasedOntology#has_event";
    /**
     * Defines the event EventDefinitions that are triggers expected for a catch Event. These EventDefinitions are only valid inside the current Event.
     * • If there is no EventDefinition defined, then this is considered a catch None Event and the Event will not have an internal marker (see Figure 10.91).
     * • If there is more than one EventDefinition defined, this is considered a catch Multiple Event and the Event will have the pentagon internal marker (see Figure 10.90).
     * This is an ordered set.
     * 
     */
    public final static String s_p_has_eventDefinition = "http://BPMNbasedOntology#has_eventDefinition";
    public final static String s_p_has_eventDefinitionEvent = "http://BPMNbasedOntology#has_eventDefinitionEvent";
    /**
     * [IRIT] specifies the exclusive gateway referenced by the default sequence flow
     * 
     */
    public final static String s_p_has_exclusiveGateway = "http://BPMNbasedOntology#has_exclusiveGateway";
    /**
     * The Expression that evaluates the value used to bind the
     * ResourceParameter. (ResourceParameterBinding)
     * 
     */
    public final static String s_p_has_expression = "http://BPMNbasedOntology#has_expression";
    /**
     * This association specifies the particular flow elements contained in a
     * FlowElementContainer. Flow elements are Events, Gateways, Sequence
     * Flows, Activities, Data Objects, Data Associations, and Choreography
     * Activities.
     * 
     */
    public final static String s_p_has_flowElements = "http://BPMNbasedOntology#has_flowElements";
    public final static String s_p_has_inMessageRef = "http://BPMNbasedOntology#has_inMessageRef";
    /**
     * [IRIT] specifies the inclusive gateway referenced by the default sequence flow
     * 
     */
    public final static String s_p_has_inclusiveGateway = "http://BPMNbasedOntology#has_inclusiveGateway";
    /**
     * identifies the incoming Sequence Flow of the FlowNode.
     * 
     */
    public final static String s_p_has_incoming = "http://BPMNbasedOntology#has_incoming";
    public final static String s_p_has_inputResourceItem = "http://BPMNbasedOntology#has_inputResourceItem";
    public final static String s_p_has_inputResourceRef = "http://BPMNbasedOntology#has_inputResourceRef";
    /**
     * A reference to the InputSets defined by the InputOutputSpecification. Every InputOutputSpecification MUST define at least one InputSet.
     * 
     */
    public final static String s_p_has_inputSet = "http://BPMNbasedOntology#has_inputSet";
    public final static String s_p_has_interfaceOperation = "http://BPMNbasedOntology#has_interfaceOperation";
    /**
     * The InputOutputBinding defines a combination of one InputSet and one OutputSet in order to bind this to an operation defined in an interface.
     * 
     */
    public final static String s_p_has_ioBinding = "http://BPMNbasedOntology#has_ioBinding";
    /**
     * The InputOutputSpecification defines the inputs and outputs and the InputSets and OutputSets for the Activity. See page 211 for more information on the InputOutputSpecification.
     * 
     * 
     * 
     */
    public final static String s_p_has_ioSpecification = "http://BPMNbasedOntology#has_ioSpecification";
    public final static String s_p_has_job = "http://BPMNbasedOntology#has_job";
    public final static String s_p_has_leader = "http://BPMNbasedOntology#has_leader";
    public final static String s_p_has_loopActivity = "http://BPMNbasedOntology#has_loopActivity";
    public final static String s_p_has_loopCardinality = "http://BPMNbasedOntology#has_loopCardinality";
    /**
     * An Activity MAY be performed once or MAY be repeated. If repeated,
     * the Activity MUST have loopCharacteristics that define the repetition
     * criteria (if the isExecutable attribute of the Process is set to
     * true).
     * 
     */
    public final static String s_p_has_loopCharacteristics = "http://BPMNbasedOntology#has_loopCharacteristics";
    /**
     * A boolean Expression that controls the loop. The Activity will only loop as long as this condition is true. The looping behavior MAY be underspecified, meaning that the modeler can simply document the condition, in which case the loop cannot be formally executed.
     * 
     */
    public final static String s_p_has_loopCondition = "http://BPMNbasedOntology#has_loopCondition";
    public final static String s_p_has_loopResourceInputRef = "http://BPMNbasedOntology#has_loopResourceInputRef";
    public final static String s_p_has_loopResourceOutputRef = "http://BPMNbasedOntology#has_loopResourceOutputRef";
    /**
     * The Message MUST be supplied (if the isExecutable attribute of the Process is set to true).
     * 
     */
    public final static String s_p_has_messageRef = "http://BPMNbasedOntology#has_messageRef";
    public final static String s_p_has_multiInstanceLoopCharacteristics = "http://BPMNbasedOntology#has_multiInstanceLoopCharacteristics";
    public final static String s_p_has_nextFlowNode = "http://BPMNbasedOntology#has_nextFlowNode";
    public final static String s_p_has_noneBehaviorEventRef = "http://BPMNbasedOntology#has_noneBehaviorEventRef";
    /**
     * The EventDefinition which is thrown when behavior is set to one and the first internal Activity instance has completed.
     * 
     */
    public final static String s_p_has_oneBehaviorEventRef = "http://BPMNbasedOntology#has_oneBehaviorEventRef";
    public final static String s_p_has_operationInterface = "http://BPMNbasedOntology#has_operationInterface";
    /**
     * This attribute specifies the operation that is invoked
     * 
     */
    public final static String s_p_has_operationRef = "http://BPMNbasedOntology#has_operationRef";
    public final static String s_p_has_outMessageRef = "http://BPMNbasedOntology#has_outMessageRef";
    /**
     * identifies the outgoing Sequence Flow of the FlowNode.
     * 
     */
    public final static String s_p_has_outgoing = "http://BPMNbasedOntology#has_outgoing";
    public final static String s_p_has_outputResourceItem = "http://BPMNbasedOntology#has_outputResourceItem";
    public final static String s_p_has_outputResourceRef = "http://BPMNbasedOntology#has_outputResourceRef";
    /**
     * A reference to the OutputSets defined by the InputOutputSpecification. Every InputOutputSpecification MUST define at least one OutputSet.
     * 
     */
    public final static String s_p_has_outputSet = "http://BPMNbasedOntology#has_outputSet";
    public final static String s_p_has_parameter = "http://BPMNbasedOntology#has_parameter";
    public final static String s_p_has_parameterExpectedValue = "http://BPMNbasedOntology#has_parameterExpectedValue";
    /**
     * Reference to the parameter defined by the Resource.
     * 
     */
    public final static String s_p_has_parameterRef = "http://BPMNbasedOntology#has_parameterRef";
    public final static String s_p_has_parameterValue = "http://BPMNbasedOntology#has_parameterValue";
    public final static String s_p_has_parameterValueBindingInput = "http://BPMNbasedOntology#has_parameterValueBindingInput";
    public final static String s_p_has_parameterValueBindingOutput = "http://BPMNbasedOntology#has_parameterValueBindingOutput";
    public final static String s_p_has_part = "http://BPMNbasedOntology#has_part";
    /**
     * This relation allows to specifiy the prefix (centi, mili, etc.) of a given unit of measure.
     * 
     */
    public final static String s_p_has_prefix = "http://BPMNbasedOntology#has_prefix";
    public final static String s_p_has_previousFlowNode = "http://BPMNbasedOntology#has_previousFlowNode";
    /**
     * the process assigned to the resource role
     * 
     */
    public final static String s_p_has_process = "http://BPMNbasedOntology#has_process";
    /**
     * Modeler-defined properties MAY be added to a Process. These properties are contained within the Process. All Tasks and Sub-Processes SHALL have access to these properties.
     * 
     */
    public final static String s_p_has_property = "http://BPMNbasedOntology#has_property";
    public final static String s_p_has_propertyElement = "http://BPMNbasedOntology#has_propertyElement";
    public final static String s_p_has_rendering = "http://BPMNbasedOntology#has_rendering";
    public final static String s_p_has_renderingTask = "http://BPMNbasedOntology#has_renderingTask";
    public final static String s_p_has_resource = "http://BPMNbasedOntology#has_resource";
    public final static String s_p_has_resourceInputRef = "http://BPMNbasedOntology#has_resourceInputRef";
    public final static String s_p_has_resourceInputs = "http://BPMNbasedOntology#has_resourceInputs";
    public final static String s_p_has_resourceOutputRef = "http://BPMNbasedOntology#has_resourceOutputRef";
    public final static String s_p_has_resourceOutputs = "http://BPMNbasedOntology#has_resourceOutputs";
    /**
     * This defines the Parameter bindings used for the
     * Resource assignment (see below). Is only applicable if a
     * resourceRef is specified.
     * 
     */
    public final static String s_p_has_resourceParameterBindings = "http://BPMNbasedOntology#has_resourceParameterBindings";
    /**
     * This model association specifies the definition of the parameters needed at runtime to resolve the Resource.
     * 
     */
    public final static String s_p_has_resourceParameters = "http://BPMNbasedOntology#has_resourceParameters";
    /**
     * [IRIT] specifies the SequenceFlow of the FlowNode
     * 
     */
    public final static String s_p_has_sequenceFlow = "http://BPMNbasedOntology#has_sequenceFlow";
    /**
     * [IRIT] specifies the Signal of the SignalEventDefinition
     * 
     */
    public final static String s_p_has_signalRef = "http://BPMNbasedOntology#has_signalRef";
    /**
     * Used to reference the corresponding 'catch' or 'target' LinkEventDefinition, when
     * this LinkEventDefinition represents a 'throw' or 'source' LinkEventDefinition.
     * 
     */
    public final static String s_p_has_source = "http://BPMNbasedOntology#has_source";
    /**
     * The FlowNode that the Sequence Flow is connecting from.
     * For a Process: Of the types of FlowNode, only Activities, Gateways, and Events can be the source. However, Activities that are Event Sub-Processes are not allowed to be a source.
     * For a Choreography: Of the types of FlowNode, only Choreography Activities, Gateways, and Events can be the source.
     * 
     */
    public final static String s_p_has_sourceRef = "http://BPMNbasedOntology#has_sourceRef";
    public final static String s_p_has_state = "http://BPMNbasedOntology#has_state";
    public final static String s_p_has_subordinatedJob = "http://BPMNbasedOntology#has_subordinatedJob";
    public final static String s_p_has_superiorJob = "http://BPMNbasedOntology#has_superiorJob";
    /**
     * The Interfaces describing the external behavior provided by this element.
     * 
     */
    public final static String s_p_has_supportedInterfaceRefs = "http://BPMNbasedOntology#has_supportedInterfaceRefs";
    /**
     * Used to reference the corresponding 'throw' or 'source' LinkEventDefinition,
     * when this LinkEventDefinition represents a 'catch' or 'target' LinkEventDefinition.
     * 
     */
    public final static String s_p_has_target = "http://BPMNbasedOntology#has_target";
    /**
     * The FlowNode that the Sequence Flow is connecting to.
     * For a Process: Of the types of FlowNode, only Activities, Gateways, and Events can be the target. However, Activities that are Event Sub-Processes are not allowed to be a target.
     * For a Choreography: Of the types of FlowNode, only Choreography Activities, Gateways, and Events can be the target.
     * 
     */
    public final static String s_p_has_targetRef = "http://BPMNbasedOntology#has_targetRef";
    /**
     * If the trigger is a Timer, then a timeCycle MAY be entered. Timer attributes are mutually exclusive and if any of the other Timer attributes is set, timeCycle MUST NOT be set (if the isExecutable attribute of the Process is set to true). The return type of the attribute timeCycle MUST conform to the ISO-8601 format for recurring time interval representations.
     * 
     */
    public final static String s_p_has_timeCycle = "http://BPMNbasedOntology#has_timeCycle";
    /**
     * If the trigger is a Timer, then a timeDate MAY be entered. Timer attributes are mutually exclusive and if any of the other Timer attributes is set, timeDate MUST NOT be set (if the isExecutable attribute of the Process is set to true). The return type of the attribute timeDate MUST conform to the ISO-8601 format for date and time representations.
     * 
     */
    public final static String s_p_has_timeDate = "http://BPMNbasedOntology#has_timeDate";
    /**
     * If the trigger is a Timer, then a timeDuration MAY be entered. Timer attributes are mutually exclusive and if any of the other Timer attributes is set, timeDuration MUST NOT be set (if the isExecutable attribute of the Process is set to true).
     * The return type of the attribute timeDuration MUST conform to the ISO-8601 format for time interval representations.
     * 
     */
    public final static String s_p_has_timeDuration = "http://BPMNbasedOntology#has_timeDuration";
    public final static String s_p_has_unit = "http://BPMNbasedOntology#has_unit";
    public final static String s_p_has_unitOfMeasure = "http://BPMNbasedOntology#has_unitOfMeasure";
    /**
     * Denotes the Activity that boundary Event is attached to.
     * 
     */
    public final static String s_p_is_attachedToRef = "http://BPMNbasedOntology#is_attachedToRef";
    public final static String s_p_is_composedOf = "http://BPMNbasedOntology#is_composedOf";
    public final static String s_p_is_installedOn = "http://BPMNbasedOntology#is_installedOn";
    public final static String s_p_is_leaderOf = "http://BPMNbasedOntology#is_leaderOf";
    public final static String s_p_is_partOf = "http://BPMNbasedOntology#is_partOf";
    public final static String s_p_is_responsibleFor = "http://BPMNbasedOntology#is_responsibleFor";
    public final static String s_p_plays = "http://BPMNbasedOntology#plays";
    /**
     * Modelers can declare that they intend all executions or performances
     * of one Process to also be valid for another Process. This means they
     * expect all the executions or performances of the first Processes to also
     * follow the steps laid out in the second Process.
     * 
     */
    public final static String s_p_supports = "http://BPMNbasedOntology#supports";
    /**
     * Allows to specifiy where the activity or the process will take place
     * 
     */
    public final static String s_p_takesPlaceAt = "http://BPMNbasedOntology#takesPlaceAt";
    /**
     * The body of the Expression.
     * 
     */
    public final static String s_p_body = "http://BPMNbasedOntology#body";
    /**
     * This attribute is used only if ordering is parallel. It determines whether running instances are cancelled when the completionCondition becomes true.
     * 
     */
    public final static String s_p_cancelRemainingInstances = "http://BPMNbasedOntology#cancelRemainingInstances";
    /**
     * This attribute defines the number of tokens that MUST be generated from the Activity. This number of tokens will be sent done any outgoing Sequence Flow (assuming any Sequence Flow conditions are satisfied).
     * Note that any value for the attribute that is greater than 1 is an advanced type of modeling and should be used with caution.
     * 
     */
    public final static String s_p_completionQuantity = "http://BPMNbasedOntology#completionQuantity";
    public final static String s_p_createdOn = "http://BPMNbasedOntology#createdOn";
    /**
     * For an End Event:
     * If the result is an Error, then the errorCode MUST be supplied (if the processType attribute of the Process is set to executable) This “throws” the Error.
     * For an Intermediate Event within normal flow:
     * If the trigger is an Error, then the errorCode MUST be entered (if the processType attribute of the Process is set to executable). This “throws” the Error.
     * For an Intermediate Event attached to the boundary of an Activity:
     * If the trigger is an Error, then the errorCode MAY be entered. This Event “catches” the Error. If there is no errorCode, then any error SHALL trigger the Event. If there is an errorCode, then only an Error that matches the errorCode SHALL trigger the Event.
     * 
     */
    public final static String s_p_errorCode = "http://BPMNbasedOntology#errorCode";
    /**
     * For an End Event:
     * If the Result is an Escalation, then the escalationCode MUST be supplied (if the processType attribute of the Process is set to executable). This “throws” the Escalation.
     * For an Intermediate Event within normal flow: If the trigger is an Escalation, then the escalationCode MUST be entered (if the processType attribute of the Process is set to executable). This “throws” the Escalation. For an Intermediate Event attached to the boundary of an Activity: If the trigger is an Escalation, then the escalationCode MAY be entered. This Event “catches” the Escalation. If there is no escalationCode, then any Escalation SHALL trigger the Event. If there is an escalationCode, then only an Escalation that matches the escalationCode SHALL trigger the Event.
     * 
     */
    public final static String s_p_escalationCode = "http://BPMNbasedOntology#escalationCode";
    public final static String s_p_firstName = "http://BPMNbasedOntology#firstName";
    /**
     * This attribute is used to uniquely identify BPMN elements. The id is REQUIRED if this element is referenced or intended to be referenced by something else. If the element is not currently referenced and is never intended to be referenced, the id MAY be omitted.
     * 
     */
    public final static String s_p_id = "http://BPMNbasedOntology#id";
    /**
     * This attribute specifies the technology that will be used to send and receive the Messages. Valid values are ##unspecified for leaving the implementation technology open, ##WebService for the Web service technology or a URI identifying any other technology or coordination protocol. A Web service is the default technology.
     * 
     */
    public final static String s_p_implementation = "http://BPMNbasedOntology#implementation";
    /**
     * When true, receipt of one of the Events will instantiate the Process instance.
     * 
     */
    public final static String s_p_instantiate = "http://BPMNbasedOntology#instantiate";
    /**
     * A boolean value specifying whether interactions, such as sending and receiving Messages and Events, not modeled in the Process can occur when the Process is executed or performed. If the value is true, they MAY NOT occur. If the value is false, they MAY occur.
     * 
     */
    public final static String s_p_isClosed = "http://BPMNbasedOntology#isClosed";
    /**
     * An optional Boolean value specifying whether the Process is executable.
     * An executable Process is a private Process that has been modeled for the purpose of being executed according to the semantics of Chapter 14 (see page 426). Of course, during the development cycle of the Process, there will be stages where the Process does not have enough detail to be “executable.”
     * A non-executable Process is a private Process that has been modeled for the purpose of documenting Process behavior at a modeler-defined level of detail. Thus, information needed for execution, such as formal condition expressions are typically not included in a non-executable Process.
     * For public Processes, no value has the same semantics as if the value were false. The value MAY not be true for public Processes.
     * 
     */
    public final static String s_p_isExecutable = "http://BPMNbasedOntology#isExecutable";
    /**
     * A flag that identifies whether this Activity is intended for the purposes of compensation.
     * If false, then this Activity executes as a result of normal execution flow.
     * If true, this Activity is only activated when a Compensation Event is detected and initiated under Compensation Event visibility scope (see page 281 for more information on scopes).
     * 
     */
    public final static String s_p_isForCompensation = "http://BPMNbasedOntology#isForCompensation";
    /**
     * An optional boolean value specifying whether Activities or Choreography Activities not in the model containing the Sequence Flow can occur between the elements connected by the Sequence Flow. If the value is true, they MAY NOT occur. If the value is false, they MAY occur. Also see the isClosed attribute on Process, Choreography, and Collaboration. When the attribute has no value, the
     * default semantics depends on the kind of model containing Sequence Flows:
     * • For non-executable Processes (public Processes and non-executable private Processes) and Choreographies no value has the same semantics as if the value were false.
     * • For an executable Processes no value has the same semantics as if the value were true.
     * • For executable Processes, the attribute MUST NOT be false.
     * 
     */
    public final static String s_p_isImmediate = "http://BPMNbasedOntology#isImmediate";
    /**
     * Specifies, if a parameter is optional or mandatory.
     * 
     */
    public final static String s_p_isRequired = "http://BPMNbasedOntology#isRequired";
    /**
     * This attribute is a flag that controls whether the Activity instances will execute sequentially or in parallel.
     * 
     */
    public final static String s_p_isSequential = "http://BPMNbasedOntology#isSequential";
    /**
     * Overrides the Expression language specified in the Definitions. The language MUST be specified in a URI format.
     * 
     */
    public final static String s_p_language = "http://BPMNbasedOntology#language";
    public final static String s_p_lastName = "http://BPMNbasedOntology#lastName";
    /**
     * Serves as a cap on the number of iterations.
     * 
     */
    public final static String s_p_loopMaximum = "http://BPMNbasedOntology#loopMaximum";
    public final static String s_p_maxValue = "http://BPMNbasedOntology#maxValue";
    /**
     * The method is an attribute that defines the Transaction method used to commit or cancel a Transaction. For executable Processes, it SHOULD be set to a technology specific URI, e.g., http://schemas.xmlsoap.org/ws/2004/10/wsat for WSAtomicTransaction, or http://docs.oasis-open.org/ws-tx/wsba/2006/06/AtomicOutcome for WS-BusinessActivity.
     * 
     */
    public final static String s_p_method = "http://BPMNbasedOntology#method";
    public final static String s_p_minValue = "http://BPMNbasedOntology#minValue";
    /**
     * The descriptive name of the element.
     * 
     */
    public final static String s_p_name = "http://BPMNbasedOntology#name";
    /**
     * This attribute is only relevant when the catch Event has more than EventDefinition (Multiple). If this value is true, then all of the types of triggers that are listed in the catch Event MUST be triggered before the Process is instantiated.
     * 
     */
    public final static String s_p_parallelMultiple = "http://BPMNbasedOntology#parallelMultiple";
    public final static String s_p_processType = "http://BPMNbasedOntology#processType";
    /**
     * The modeler MAY include a script that can be run when the Task is performed. If a script is not included, then the Task will act as the equivalent of an Abstract Task.
     * 
     */
    public final static String s_p_script = "http://BPMNbasedOntology#script";
    /**
     * Defines the format of the script. This attribute value MUST be specified with a mime-type format. And it MUST be specified if a script is provided.
     * 
     */
    public final static String s_p_scriptFormat = "http://BPMNbasedOntology#scriptFormat";
    /**
     * 
     * 
     */
    public final static String s_p_scriptLanguage = "http://BPMNbasedOntology#scriptLanguage";
    /**
     *  This attribute defines the number of tokens that MUST arrive before the Activity can begin. Note that any value for the attribute that is greater than 1 is an advanced type of modeling and should be used with caution.
     * 
     */
    public final static String s_p_startQuantity = "http://BPMNbasedOntology#startQuantity";
    public final static String s_p_state = "http://BPMNbasedOntology#state";
    /**
     * Flag that controls whether the loop condition is evaluated at the beginning (testBefore = true) or at the end (testBefore = false) of the loop iteration.
     * 
     */
    public final static String s_p_testBefore = "http://BPMNbasedOntology#testBefore";
    public final static String s_p_type = "http://BPMNbasedOntology#type";
    public final static String s_p_value = "http://BPMNbasedOntology#value";
    /**
     * For a throw Compensation Event, this flag determines whether the throw Intermediate Event waits for the triggered compensation to complete (the default), or just triggers the compensation and immediately continues (the BPMN 1.2 behavior).
     * 
     */
    public final static String s_p_waitForCompletion = "http://BPMNbasedOntology#waitForCompletion";
    public final static String s_p_created_by = "http://www.geneontology.org/formats/oboInOwl#created_by";
    public final static String s_p_comment = "http://www.w3.org/2000/01/rdf-schema#comment";
    public final static String s_p_label = "http://www.w3.org/2000/01/rdf-schema#label";

}
